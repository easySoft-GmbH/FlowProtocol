@page "{template}"
@model FlowProtocol.Pages.FlowTemplates.ApplyModel

@{
    ViewData["Title"] = "FlowProtocol Vorlage";
}

@if (Model.ShowQueryElements.Any())
{
    <form method="post">
        <h2>Vorlage @Model.TemplateBreadcrumb</h2>
        @if (Model.TemplateDescription != null)
        {
            <p>
                @foreach (var line in Model.TemplateDescription)
                {
                    @line<br>
                }
            </p>
            <hr>
        }
        @if (Model.ReadErrors.Any())
        {
            <p><strong>Hinweis:</strong> Beim Ausführen der Vorlage sind Fehler aufgetreten.
                Bitte wenden Sie sich an den Autoren der Vorlage oder einen Administrator, um die Korrekturen zu veranlassen:
            </p>
            <ol>
                @foreach (var eitem in Model.ReadErrors)
                {
                    <li>
                        <strong>Fehler @eitem.ErrorCode, @eitem.ErrorText</strong><br />
                        Zeile @eitem.LineNumber in <i>@eitem.FilePath</i><br />
                        <span style="color: #ff0000;">@eitem.Codeline</span>
                    </li>
                }
            </ol>
            <hr>
        }
        @foreach (var k in Model.GivenKeys)
        {
            <input type="hidden" asp-for="SelectedOptions[k]" />
        }
        @foreach (var q in Model.ShowQueryElements)
        {
            @if (!string.IsNullOrEmpty(q.Item1))
            {
                <h3>@q.Item1</h3>
            }
            if (q.Item2 != null)
            { // Restriction
                <div class="formbuilder-radio-group form-group">
                    <label class="formbuilder-radio-group-label">
                        @q.Item2.QuestionText
                    </label>
                    @if (q.Item2.HelpLines.Any())
                    {
                        @await Html.PartialAsync("_HelpTextLines", q.Item2)
                    }
                    <div class="radio-group">
                        @foreach (var idx in q.Item2.Options)
                        {
                            <div class="formbuilder-radio">
                                <input value="@idx.Key" type="radio" asp-for="SelectedOptions[q.Item2.Key]" id="@idx.UniqueKey">
                                <label for="@idx.UniqueKey">@idx.OptionText</label>
                            </div>
                        }
                    </div>
                </div><br>
            }
            else if (q.Item3 != null)
            { // InputItem
                <div class="rendered-form">
                    <div class="formbuilder-text form-group">
                        <label for="@q.Item3.Key" class="formbuilder-text-label">
                            @q.Item3.QuestionText
                            <br>
                        </label>
                        @if (q.Item3.HelpLines.Any())
                        {
                            @await Html.PartialAsync("_HelpTextLines", q.Item3)
                        }
                        <input type="text" class="form-control" access="false" id="@q.Item3.Key" asp-for="SelectedOptions[q.Item3.Key]"
                maxlength="50">
                    </div>
                </div><br>
            }
        }
        <button type="submit" class="btn btn-primary">Weiter</button>
    </form>
}
else
{
    <h2>Ergebnisliste (@Model.TemplateBreadcrumb)</h2>
    @foreach (var group in Model.ShowResultGroups)
    {
        @if (!string.IsNullOrWhiteSpace(group.Key))
        {
            <h4>@group.Key</h4>
        }
        else if (Model.ShowResultGroups.Count > 1)
        {
            <h4>Allgemein</h4>
        }
        <ol>
            @foreach (var t in group.Value)
            {
                <li>
                    @t.ResultItemText
                    @if (t.SubItems.Any())
                    {
                        <ul>
                            @foreach (var s in t.SubItems)
                            {
                                <li>
                                    @if (Model.IsURL(s, out string url, out string displaytext))
                                    {
                                        <a href="@url" target="_blank">@displaytext</a>
                                    }
                                    else
                                    {
                                        @s
                                    }
                                </li>
                            }
                        </ul>
                    }
                    @if (!string.IsNullOrWhiteSpace(t.CodeBlock))
                    {
                        <pre><code>@t.CodeBlock</code></pre>
                    }
                </li>
            }
        </ol>
    }
    <p>
        <a href=@Model.TemplateBaseURL class="btn btn-primary">Neue Ausführung</a>
        <a asp-page="/Index" class="btn btn-primary">Zurück zur Startseite</a>
    </p>
}